wait(1)
if game.PlaceId == 6284583030 or game.PlaceId == 10321372166 or game.PlaceId == 7722306047 or game.PlaceId == 12610002282 or game.PlaceId == 11725212117 then
	local ScriptStartTime = tick()
	local GLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
	local colors = {
		SchemeColor = Color3.fromRGB(255, 255, 255),
		Background = Color3.fromRGB(255, 255, 0),
		Header = Color3.fromRGB(0, 170, 0),
		TextColor = Color3.fromRGB(0, 0, 0),
		ElementColor = Color3.fromRGB(255, 170, 0)
	}
	local Window = GLibrary.CreateLib("Script made by @DevXRob. Hello, "..game.Players.LocalPlayer.Name.."!", colors)

	local Tab = Window:NewTab("Egg")
	local Section = Tab:NewSection("Egg")


	local Network = require(game:GetService("ReplicatedStorage"):WaitForChild("Library"):WaitForChild("Client"):WaitForChild("Network"))
	local Fire, Invoke = Network.Fire, Network.Invoke
	while not game.Players.LocalPlayer:WaitForChild("__LOADED", 120).Value do
		wait()
	end
	for i = 1,60 do
		if game:GetService("ReplicatedStorage") and require(game:GetService("ReplicatedStorage").Library) and require(game:GetService("ReplicatedStorage").Library.Client) and require(game:GetService("ReplicatedStorage").Library.Client.Save) and require(game:GetService("ReplicatedStorage").Library.Client.Save).Get() and require(game:GetService("ReplicatedStorage").Library.Client.Save).Get().Pets then
		else
			wait(1)
		end
	end
	local Pets = require(game:GetService("ReplicatedStorage").Library.Client.Save).Get().Pets
	local CurrentWorld = require(game:GetService("ReplicatedStorage").Library.Client.Save).Get().World
	local StartDiamonds = require(game:GetService("ReplicatedStorage").Library).Save.Get().Diamonds
	local StartCurrency1 = {}
	local StartCurrency2 = {}
	local Commas = require(game:GetService("ReplicatedStorage").Library).Functions.Commas
	local EquippedPets
	if game.PlaceId == 10321372166 then
		EquippedPets = require(game:GetService("ReplicatedStorage").Library.Client.Save).Get().HardcorePetsEquipped
	else
		EquippedPets = require(game:GetService("ReplicatedStorage").Library.Client.Save).Get().PetsEquipped
	end
	local DMPets = require(game:GetService("ReplicatedStorage").Library.Client.Save).Get().DarkMatterQueue

	local old = hookfunction(getupvalue(Fire, 1), function(...)
		return true
	end)
	local LocalPlayer = game.Players.LocalPlayer
	local banSuccess, banError = pcall(function() 
		local Blunder = require(game:GetService("ReplicatedStorage"):WaitForChild("X", 10):WaitForChild("Blunder", 10):WaitForChild("BlunderList", 10))
		if not Blunder or not Blunder.getAndClear then LocalPlayer:Kick("Error while bypassing the anti-cheat! (Didn't find blunder)") end

		local OldGet = Blunder.getAndClear
		setreadonly(Blunder, false)
		local function OutputData(Message)
			print("-- PET SIM X BLUNDER --")
			print(Message .. "\n")
		end

		Blunder.getAndClear = function(...)
			local Packet = ...
			for i,v in next, Packet.list do
				if v.message ~= "PING" then
					OutputData(v.message)
					table.remove(Packet.list, i)
				end
			end
			return OldGet(Packet)
		end

		setreadonly(Blunder, true)
	end)

	if not banSuccess then
		LocalPlayer:Kick("Error while bypassing the anti-cheat! (".. banError ..")")
		return
	end

	local Library = require(game:GetService("ReplicatedStorage").Library)
	for k, v in Library.Directory.Currency do
		table.insert(StartCurrency1, k)
		table.insert(StartCurrency2, Library.Save.Get()[k] or 0)
	end
	local bypassSuccess, bypassError = pcall(function()
		if not Library.Network then 
			LocalPlayer:Kick("Network not found, can't bypass!")
		end

		if not Library.Network.Invoke or not Library.Network.Fire then
			LocalPlayer:Kick("Network Invoke/Fire was not found! Failed to bypass!")
		end

		hookfunction(debug.getupvalue(Library.Network.Invoke, 1), function(...) return true end)
		local originalPlay = Library.Audio.Play
		Library.Audio.Play = function(...) 
			if checkcaller() then
				local audioId, parent, pitch, volume, maxDistance, group, looped, timePosition = unpack({ ... })
				if type(audioId) == "table" then
					audioId = audioId[Random.new():NextInteger(1, #audioId)]
				end
				if not parent then
					warn("Parent cannot be nil", debug.traceback())
					return nil
				end
				if audioId == 0 then return nil end

				if type(audioId) == "number" or not string.find(audioId, "rbxassetid://", 1, true) then
					audioId = "rbxassetid://" .. audioId
				end
				if pitch and type(pitch) == "table" then
					pitch = Random.new():NextNumber(unpack(pitch))
				end
				if volume and type(volume) == "table" then
					volume = Random.new():NextNumber(unpack(volume))
				end
				if group then
					local soundGroup = game.SoundService:FindFirstChild(group) or nil
				else
					soundGroup = nil
				end
				if timePosition == nil then
					timePosition = 0
				else
					timePosition = timePosition
				end
				local isGargabe = false
				if not pcall(function() local _ = parent.Parent end) then
					local newParent = parent
					pcall(function()
						newParent = CFrame.new(newParent)
					end)
					parent = Instance.new("Part")
					parent.Anchored = true
					parent.CanCollide = false
					parent.CFrame = newParent
					parent.Size = Vector3.new()
					parent.Transparency = 1
					parent.Parent = workspace:WaitForChild("__DEBRIS")
					isGargabe = true
				end
				local sound = Instance.new("Sound")
				sound.SoundId = audioId
				sound.Name = "sound-" .. audioId
				sound.Pitch = pitch and 1
				sound.Volume = volume and 0.5
				sound.SoundGroup = soundGroup
				sound.Looped = looped and false
				sound.MaxDistance = maxDistance and 100
				sound.TimePosition = timePosition
				sound.RollOffMode = Enum.RollOffMode.Linear
				sound.Parent = parent
				if not require(game:GetService("ReplicatedStorage"):WaitForChild("Library"):WaitForChild("Client")).Settings.SoundsEnabled then
					sound:SetAttribute("CachedVolume", sound.Volume)
					sound.Volume = 0
				end
				sound:Play()
				getfenv(originalPlay).AddToGarbageCollection(sound, isGargabe)
				return sound
			end

			return originalPlay(...)
		end

	end)

	if not bypassSuccess then
		print(bypassError)
		LocalPlayer:Kick("Error while bypassing network, try again or wait for an update!")
		return
	end

	local httprequest = (syn and syn.request) or http and http.request or http_request or (fluxus and fluxus.request) or request
	local httpservice = game:GetService('HttpService')
	local function serverHop()
		local gameId = game.PlaceId
		local servers = {}
		local req = httprequest({Url = "https://games.roblox.com/v1/games/"..gameId.."/servers/Public?sortOrder=Desc&excludeFullGames=true&limit=100"})
		local body = httpservice:JSONDecode(req.Body)
		if body and body.data then
			for i, v in next, body.data do
				if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.playing > 0 and not (v.id == game.JobId)  then
					table.insert(servers, 1, v.id)
				end 
			end
		end
		if #servers > 0 then
			game:GetService("TeleportService"):TeleportToPlaceInstance(gameId, servers[math.random(1, #servers)], game.Players.LocalPlayer)
		end
		game:GetService("TeleportService").TeleportInitFailed:Connect(function()
			game:GetService("TeleportService"):TeleportToPlaceInstance(gameId, servers[math.random(1, #servers)], game.Players.LocalPlayer)
		end)
	end

	local DefaultSettings = {}

	getgenv().Settings = {
		AutoLoad = false,
		OctupleEggs = false,
		TripleEggs = false,
		SelectedEgg = "",
		AppEggName = "",
		Hatching = false,
		SearchingAnEgg = false,
		AnEggFounded = false,
		FarmAreas = {},
		AutoFarmSentPetCD = 0.125,
		AutoFarmCD = 0,
		CollectOrbs = false,
		CollectLootbags = false,
		SentAllPets = false,
		FarmMode = "Highest Coin Multiplier",
		SecondFarmMode = "Highest Hitpoint",
		FarmTP = false,
		FarmZone = false,
		FarmZoneDist = 35,
		Farming = false,
		MakingCD = 0,
		MakingGolden = false,
		GoldenAmount = 6,
		GoldenHardcore = false,
		GoldenHardcoreAmount = 10,
		GoldenShiny = false,
		GoldenSecrets = false,
		MakingRainbow = false,
		RainbowAmount = 6,
		RainbowHardcore = false,
		RainbowHardcoreAmount = 10,
		RainbowShiny = false,
		RainbowSecrets = false,
		MakingDM = false,
		DMAmount = 6,
		DMHardcore = false,
		DMHardcoreAmount = 8,
		DMShiny = false,
		DMSecrets = false,
		ClaimingDM = false,
		Fusing = false,
		FuseAmount = 3,
		FuseHardcore = false,
		FuseShiny = false,
		ExcludedCoins = {},
		FPS = 60,
		STracker = false,
		STrackerUPDT = 60,
		FarmHop = false,
		Render = true,
		WebHookID = "",
		DiamondsHook = false,
		OtherCurrencyHook = false,
		SendPerCDHook = false,
		HookCD = 30,
		PetsHatchedHook = false,
		NormalPetsHatchedHook = false,
		RarePetsHatchedHook = false,
		EpicPetsHatchedHook = false,
		LegendaryPetsHatchedHook = false,
		MythicalPetsHatchedHook = false,
		SecretPetsHatchedHook = false,
		ExclusivePetsHatchedHook = false,
	}

	for k,v in getgenv().Settings do
		table.insert(DefaultSettings, {k=v})
	end

	local plrfile = game.Players.LocalPlayer.Name
	local function SaveSettings()
		local JSON
		local HttpService = game:service('HttpService')
		JSON = HttpService:JSONEncode(getgenv().Settings)
		writefile('MyPSX'.." "..plrfile..'.txt',JSON)
	end
	local function LoadSettings()
		local HttpService = game:service('HttpService')
		if isfile('MyPSX'.." "..plrfile..'.txt') then
			getgenv().Settings = HttpService:JSONDecode(readfile('MyPSX'.." "..plrfile..'.txt'))
		end
	end

	local ChangingVariables = {
		OctupleEggs = false,
		TripleEggs = false,
		SelectedEgg = "",
		AppEggName = "",
		Hatching = false,
		FarmAreas = {},
		FarmPets = {},
		FarmCoins = {},
		AutoFarmSentPetCD = 0.125,
		AutoFarmCD = 0,
		CollectOrbs = false,
		CollectLootbags = false,
		SentAllPets = false,
		FarmMode = "Highest Coin Multiplier",
		SecondFarmMode = "Highest Hitpoint",
		FarmTP = false,
		FarmZone = false,
		FarmZoneDist = 35,
		Farming = false,
		MakingCD = 0,
		MakingGolden = false,
		GoldenAmount = 6,
		GoldenHardcore = false,
		GoldenHardcoreAmount = 10,
		GoldenShiny = false,
		GoldenSecrets = false,
		MakingRainbow = false,
		RainbowAmount = 6,
		RainbowHardcore = false,
		RainbowHardcoreAmount = 10,
		RainbowShiny = false,
		RainbowSecrets = false,
		MakingDM = false,
		DMAmount = 6,
		DMHardcore = false,
		DMHardcoreAmount = 8,
		DMShiny = false,
		DMSecrets = false,
		ClaimingDM = false,
		Fusing = false,
		FuseAmount = 3,
		FuseHardcore = false,
		FuseShiny = false,
		AutoLoad = false,
		ExcludedCoins = {},
		FPS = 60,
		STracker = false,
		STrackerUPDT = 60,
		FarmHop = false,
		Render = true,
		WebHookID = "",
		DiamondsHook = false,
		OtherCurrencyHook = false,
		SendPerCDHook = false,
		HookCD = 30,
		PetsHatchedHook = false,
		NormalPetsHatchedHook = false,
		RarePetsHatchedHook = false,
		EpicPetsHatchedHook = false,
		LegendaryPetsHatchedHook = false,
		MythicalPetsHatchedHook = false,
		SecretPetsHatchedHook = false,
		ExclusivePetsHatchedHook = false,
	}

	local function convertColorToDiscordFormat(color)
		local r = math.floor(color.R * 255)
		local g = math.floor(color.G * 255)
		local b = math.floor(color.B * 255)
		return r * 65536 + g * 256 + b
	end
	local httprequest = (syn and syn.request) or http and http.request or http_request or (fluxus and fluxus.request) or request
	local httpservice = game:GetService('HttpService')
	local function sendWebhook(authorName, fields, ColorFromRGB, ifRGB, image)
		local timestamp = os.date("!%Y-%m-%dT%H:%M:%S.000Z")
		local col = ColorFromRGB
		if ifRGB then
			col = convertColorToDiscordFormat(ColorFromRGB)
		end
		local data = {
			["username"] = authorName,
			["embeds"] = {{
				["fields"] = fields,
				["color"] = col,
				["image"] = {
					["url"] = image or nil
				},
				["timestamp"] = timestamp,
			}}
		}

		httprequest({
			Url = ChangingVariables.WebHookID,
			Method = "POST",
			Headers = {["Content-Type"] = "application/json"},
			Body = httpservice:JSONEncode(data)
		})
	end
	
	function GetThumbnail(id, type)
		local nailname = (type == 'Normal' or type == 'Rainbow' and 'thumbnail') or (type == 'Gold' and 'goldenThumbnail') or (type == 'Dark Matter' and 'darkMatterThumbnail')
		local eeee = Library.Directory.Pets[tostring(id)][nailname] or Library.Directory.Pets[tostring(id)]["thumbnail"] 
		local AssetID = eeee:gsub("rbxassetid%:%/%/", "")
		local Link = "https://www.roblox.com/item-thumbnails?params=[{assetId:"..AssetID.."}]"
		local Response = game:GetService("HttpService"):JSONDecode(game:HttpGet(Link))
		return Response[1].thumbnailUrl
	end
	
	local IDToName = {}
	local NameToID = {}
	local PettoRarity = {}
	for i,v in pairs(Library.Directory.Pets) do
		IDToName[i] = v.name
		NameToID[v.name] = i
		PettoRarity[i] = v.rarity
	end 
	
	local function SendNewPetHook(v)
		local ThingyThingyTempTypeThing = (v.g and 'Gold') or (v.r and 'Rainbow') or (v.dm and 'Dark Matter') or 'Normal'
		local Formation = (v.g and ':crown: Gold') or (v.r and ':rainbow: Rainbow') or (v.dm and ':milky_way: Dark Matter') or ':roll_of_paper: Normal'
		local Thumbnail = GetThumbnail(v.id, ThingyThingyTempTypeThing)
		local Name = IDToName[v.id]
		local Nickname = v.nk
		local nth = v.idt
		local Strength = v.s
		local Powers = v.powers or {}
		local Rarity = PettoRarity[v.id]
		local RarityAllowed = {
			Basic = false,
			Rare = false,
			Epic = false,
			Legendary = false,
			Mythical = false,
			Secret = false,
			Exclusive = false,
		}
		if ChangingVariables.NormalPetsHatchedHook then
			RarityAllowed.Basic = true
		end
		if ChangingVariables.RarePetsHatchedHook then
			RarityAllowed.Rare = true
		end
		if ChangingVariables.EpicPetsHatchedHook then
			RarityAllowed.Epic = true
		end
		if ChangingVariables.LegendaryPetsHatchedHook then
			RarityAllowed.Legendary = true
		end
		if ChangingVariables.MythicalPetsHatchedHook then
			RarityAllowed.Mythical = true
		end
		if ChangingVariables.SecretPetsHatchedHook then
			RarityAllowed.Secret = true
		end
		if ChangingVariables.ExclusivePetsHatchedHook then
			RarityAllowed.Exclusive = true
		end
		if RarityAllowed[Rarity] and RarityAllowed[Rarity] == true then
			local Color = (Rarity == 'Exclusive' and "e676ff") or (Rarity == 'Mythical' and "ff8c00") or (Rarity == 'Legendary' and "ff45f6") or (Rarity == 'Epic' and "ffea47") or (Rarity == 'Rare' and "42ff5e") or (Rarity == 'Basic' and "b0b0b0")
			local NewPowers = {}
			for a,b in pairs(Powers) do
				local e = tostring(b[1] .. " " .. b[2])
				table.insert(NewPowers, e)
			end
			local fields = {
				{
					["name"] = "Account Username",
					["value"] = "@"..game.Players.LocalPlayer.Name.." ("..game.Players.LocalPLayer.DisplayName..")",
					["inline"] = true
				},
				{
					["name"] = "Name",
					["value"] = tostring(Name),
					["inline"] = true
				},
				{
					["name"] = "Nickname",
					["value"] = tostring(Nickname),
					["inline"] = true
				},
				{
					["name"] = "Rarity",
					["value"] = tostring(Rarity),
					["inline"] = true
				},
				{
					["name"] = "Formation",
					["value"] = tostring(Formation),
					["inline"] = true
				},
				{
					["name"] = "Strength",
					["value"] = tostring(Library.Functions.Commas(Strength)),
					["inline"] = true
				},
			}
			local upowers = ""
			for _,v in NewPowers do
				upowers = upowers..v..", "
			end
			table.insert(fields, {
				["name"] = "Powers",
				["value"] = tostring(upowers),
				["inline"] = true
			})
			sendWebhook("New Pet Notify", fields, tonumber(tostring("0x" .. Color)), false, Thumbnail)
		end
	end
	
	spawn(function()
		local MyPets = {}
		for _,v in Library.Save.Get().Pets do
			table.insert(MyPets, v.uid)
		end
		while wait(1) do
			if ChangingVariables.PetsHatchedHook then
				for _,v in Library.Save.Get().Pets do
					if not table.find(MyPets, v.uid) then
						table.insert(MyPets, v.uid)
						SendNewPetHook(v)
					end
				end
			end
		end
	end)
	
	local function SendEndCurrencyHook()
		if ChangingVariables.DiamondsHook then
			local fields = {}
			table.insert(fields, {
				["name"] = "Diamonds earned per this session",
				["value"] = Commas(require(game:GetService("ReplicatedStorage").Library).Save.Get().Diamonds-StartDiamonds),
				["inline"] = true
			})
			table.insert(fields, {
				["name"] = "Current Amount of Diamonds",
				["value"] = Commas(require(game:GetService("ReplicatedStorage").Library).Save.Get().Diamonds),
				["inline"] = true
			})
			table.insert(fields, {
				["name"] = "Account Username",
				["value"] = "@"..game.Players.LocalPlayer.Name.." ("..game.Players.LocalPLayer.DisplayName..")",
				["inline"] = true
			})
			table.insert(fields, {
				["name"] = "Session Time",
				["value"] = math.floor(tick()-ScriptStartTime).." Seconds",
				["inline"] = true
			})
			sendWebhook("Recources Info", fields, Color3.fromRGB(0,255,255), true, "https://static.wikia.nocookie.net/pet-simulator/images/5/51/Diamond_%28PSX%29.png/revision/latest?cb=20221111061240")
		end
		if ChangingVariables.OtherCurrencyHook then
			wait(1)
			local fields = {}
			for curr,_ in Library.Directory.Currency do
				local fields = {}
				local cur = 0
				table.insert(fields, {
					["name"] = "Account Username",
					["value"] = "@"..game.Players.LocalPlayer.Name.." ("..game.Players.LocalPLayer.DisplayName..")",
					["inline"] = true
				})
				for i,v in StartCurrency1 do
					if v == curr then
						cur = StartCurrency2[i]
					end
				end
				table.insert(fields, {
					["name"] = curr.." earned per "..ChangingVariables.HookCD.." Seconds",
					["value"] = Commas((require(game:GetService("ReplicatedStorage").Library).Save.Get()[curr] or 0)-cur),
					["inline"] = true
				})
				table.insert(fields, {
					["name"] = "Current Amount of "..curr,
					["value"] = Commas(require(game:GetService("ReplicatedStorage").Library).Save.Get()[curr] or 0),
					["inline"] = true
				})
			end
			sendWebhook("Recources Info", fields, Color3.fromRGB(85, 255, 0), true)
		end
	end
	local SendingCurrencyHook = false
	local function SendCurrencyHook()
		SendingCurrencyHook = true
		while ChangingVariables.SendPerCDHook do
			if ChangingVariables.DiamondsHook then
				local fields = {}
				table.insert(fields, {
					["name"] = "Diamonds earned per "..ChangingVariables.HookCD.." Seconds",
					["value"] = Commas(require(game:GetService("ReplicatedStorage").Library).Save.Get().Diamonds-StartDiamonds),
					["inline"] = true
				})
				table.insert(fields, {
					["name"] = "Current Amount of Diamonds",
					["value"] = Commas(require(game:GetService("ReplicatedStorage").Library).Save.Get().Diamonds),
					["inline"] = true
				})
				table.insert(fields, {
					["name"] = "Account Username",
					["value"] = "@"..game.Players.LocalPlayer.Name.." ("..game.Players.LocalPLayer.DisplayName..")",
					["inline"] = true
				})
				sendWebhook("Recources Info", fields, Color3.fromRGB(0,255,255), true, "https://static.wikia.nocookie.net/pet-simulator/images/5/51/Diamond_%28PSX%29.png/revision/latest?cb=20221111061240")
				StartDiamonds = require(game:GetService("ReplicatedStorage").Library).Save.Get().Diamonds
			end
			if ChangingVariables.OtherCurrencyHook then
				wait(1)
				local fields = {}
				table.insert(fields, {
					["name"] = "Account Username",
					["value"] = "@"..game.Players.LocalPlayer.Name.." ("..game.Players.LocalPLayer.DisplayName..")",
					["inline"] = true
				})
				for curr,_ in Library.Directory.Currency do
					local cur = 0
					for i,v in StartCurrency1 do
						if v == curr then
							cur = StartCurrency2[i]
						end
					end
					table.insert(fields, {
						["name"] = curr.." earned per "..ChangingVariables.HookCD.." Seconds",
						["value"] = Commas((require(game:GetService("ReplicatedStorage").Library).Save.Get()[curr] or 0)-cur),
						["inline"] = true
					})
					table.insert(fields, {
						["name"] = "Current Amount of "..curr,
						["value"] = Commas(require(game:GetService("ReplicatedStorage").Library).Save.Get()[curr] or 0),
						["inline"] = true
					})
				end
				sendWebhook("Recources Info", fields, Color3.fromRGB(85, 255, 0), true)
				StartCurrency1 = {}
				StartCurrency2 = {}
				for k,_ in Library.Directory.Currency do
					table.insert(StartCurrency1, k)
					table.insert(StartCurrency2, Library.Save.Get()[k] or 0)
				end
			end
			wait(ChangingVariables.HookCD)
		end
		SendingCurrencyHook = false
	end

	local function AutoHatch()
		while ChangingVariables.Hatching do
			Invoke("Buy Egg", ChangingVariables.SelectedEgg, ChangingVariables.TripleEggs, ChangingVariables.OctupleEggs)
			wait()
		end
	end

	Section:NewToggle("Triple Eggs", "Press it only if you gave Triple Eggs pass.", function(state)
		if state then
			ChangingVariables.TripleEggs = true
		else
			ChangingVariables.TripleEggs = false
		end
	end)

	Section:NewToggle("Octuple eggs", "Press it only if you gave Octuple Eggs pass.", function(state)
		if state then
			ChangingVariables.OctupleEggs = true
		else
			ChangingVariables.OctupleEggs = false
		end
	end)

	local eggs = {}
	for i, v in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Eggs:GetChildren()) do
		if v:IsA("Folder") then
			table.insert(eggs, "🔥 "..v.Name)
			for i, v in pairs(v:GetChildren()) do
				table.insert(eggs, v.Name)
			end
		end
	end

	local eggslist = Section:NewDropdown("Egg", "Select an egg to open", {unpack(eggs)}, function(currentOption)
		ChangingVariables.SelectedEgg = currentOption
		GetEggInfoByName(ChangingVariables.SelectedEgg)
	end)

	Section:NewTextBox("Name of the egg", "Print here the name of an egg", function(txt)
		local foundedeggs = {}
		for i, v in eggs do
			if string.find(string.lower(v), string.lower(txt)) then
				table.insert(foundedeggs, v)
				ChangingVariables.SelectedEgg = v
				GetEggInfoByName(ChangingVariables.SelectedEgg)
			end
		end
		eggslist:Refresh(foundedeggs)
		if txt == "" or txt == " " then
			eggslist:Refresh(eggs)
		end
	end)


	Section:NewToggle("Hatch", "Press it to start hatching", function(state)
		if state then
			ChangingVariables.Hatching = true
			spawn(AutoHatch)
		else
			ChangingVariables.Hatching = false
		end
	end)

	local pathToScript = game.Players.LocalPlayer.PlayerScripts.Scripts.Game['Open Eggs']
	local oldFunc = getsenv(pathToScript).OpenEgg
	local function ToggleEggAnimation(delanimation)
		if delanimation == true then 
			getsenv(pathToScript).OpenEgg = function() return end 
		else
			getsenv(pathToScript).OpenEgg = oldFunc
		end
	end

	Section:NewToggle("Remove eggs animation", "Press it to remove eggs animations", function(state)
		ToggleEggAnimation(state)
	end)

	Section:NewLabel("Open the first offered egg")

	local SearchingAnEgg = false
	local AnEggFounded = false
	game.Players.LocalPlayer.PlayerGui.Message.Frame.Desc.Changed:Connect(function()
		if SearchingAnEgg then
			if string.find(game.Players.LocalPlayer.PlayerGui.Message.Frame.Desc.Text, "Buy and open a") then
				local egg = string.gsub(game.Players.LocalPlayer.PlayerGui.Message.Frame.Desc.Text, "Buy and open a ", "")
				for i = 1, string.len(egg) do
					if not AnEggFounded then
						if table.find(eggs, string.sub(egg, 1, i)) then
							ChangingVariables.SelectedEgg = string.sub(egg, 1, i)
							GetEggInfoByName(ChangingVariables.SelectedEgg)
							SearchingAnEgg = false
							ChangingVariables.Hatching = true
							spawn(AutoHatch)
						end
					end
				end
			end
		end
	end)

	Section:NewToggle("Hatch first egg", "Press E on the egg you wanna open", function(state)
		if state then
			SearchingAnEgg = true
		else
			ChangingVariables.Hatching = false
			SearchingAnEgg = false
		end
	end)

	Section:NewLabel("Selected Egg Info")

	local SEggName = Section:NewLabel("Selected egg:")

	local SEggsList = Section:NewDropdown("Selected Egg Info", "Info from selected egg", {"Egg Price:", "Egg Pets:"}, function(currentOption)
	end)

	function GetEggInfoByName(EggName)
		local SEggModule
		local SEggInfo = {}
		for _,v in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Eggs:GetChildren()) do
			for _, v in v:GetChildren() do
				if v.Name == EggName then
					if v[v.Name]:IsA("ModuleScript") then
						SEggModule = require(v[v.Name])
					end
				end
			end
		end
		pcall(function()
			table.insert(SEggInfo, "Egg Price: "..Library.Functions.Commas(SEggModule.cost).." "..SEggModule.currency)
			table.insert(SEggInfo, "Egg Pets:")
			for _,v in SEggModule.drops do
				local PetName = ""
				for _,vv in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Pets:GetChildren()) do
					if tonumber(string.sub(vv.Name, 1, string.len(v[1]))) == tonumber(v[1]) then
						PetName = string.sub(vv.Name, string.len(v[1])+1, string.len(vv.Name))
					end
				end
				table.insert(SEggInfo, PetName.." (Chance 1 to "..Library.Functions.Commas(math.floor(1/Library.Shared.GetPetChance(tostring(v[1]))))..")")
			end
			SEggName:UpdateLabel("Selected Egg: "..EggName)
			SEggsList:Refresh(SEggInfo)
		end)
	end

	local Tab = Window:NewTab("Autofarm")
	local Section = Tab:NewSection("Autofarm")

	local Areas = {}
	local WorldCoins = {}
	local FarmModes = {
		"Highest Coin Multiplier",
		"Highest Hitpoint",
		"Fruits",
		"Chest",
		"Coin",
		"Present",
		"Vault",
		"Safe",
		"Crate",
		"Diamonds",
		--	"Pinata"
	}

	local function GetFarmPets()
		table.clear(ChangingVariables.FarmPets)
		for k in EquippedPets do
			table.insert(ChangingVariables.FarmPets, k)
		end
	end
	local WorldCoins1 = Library.Things:WaitForChild("Coins")
	local function GetFarmCoins()
		table.clear(ChangingVariables.FarmCoins)
		local coins = Invoke("Get Coins")
		for k,v in coins do
			if ChangingVariables.FarmZone == true then
				if (v.p - game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position).Magnitude <= ChangingVariables.FarmZoneDist*10 then
					local excludedfounded = false
					for _, vvv in ChangingVariables.ExcludedCoins do
						if v.n == vvv then
							excludedfounded = true
						end
					end
					if excludedfounded == false then
						local coin = {
							ID = k,
							World = v.w,
							Area = v.a,
							Hitpoints = v.h,
							PetsFarming = v.petsFarming,
							Name = v.n,
							Boost = false,
							BoostM = 0,
							Position = v.p
						}
						if v.b then
							coin.Boost = true
							coin.BoostM = v.b.l[1].m
						end
						table.insert(ChangingVariables.FarmCoins, coin)
						for i, vv in coin.PetsFarming do
							if table.find(ChangingVariables.FarmPets, vv) then
								for i, v in ChangingVariables.FarmPets do
									if v == vv then
										table.remove(ChangingVariables.FarmPets, i)
									end
								end
							end
						end
					end
				end
			else
				for i, vv in ChangingVariables.FarmAreas do
					if v.a == vv then
						local excludedfounded = false
						for _, vvv in ChangingVariables.ExcludedCoins do
							if v.n == vvv then
								excludedfounded = true
							end
						end
						if excludedfounded == false then
							local coin = {
								ID = k,
								World = v.w,
								Area = v.a,
								Hitpoints = v.h,
								PetsFarming = v.petsFarming,
								Name = v.n,
								Boost = false,
								BoostM = 0,
								Position = v.p
							}
							if v.b then
								coin.Boost = true
								coin.BoostM = v.b.l[1].m
							end
							table.insert(ChangingVariables.FarmCoins, coin)
							for i, vv in coin.PetsFarming do
								if table.find(ChangingVariables.FarmPets, vv) then
									for i, v in ChangingVariables.FarmPets do
										if v == vv then
											table.remove(ChangingVariables.FarmPets, i)
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end

	local function SentFarmPet(pet, coin)
		Invoke("Join Coin", coin, {pet})
		Fire("Farm Coin", coin, pet)
	end

	local function SentFarmPets(pets, coin)
		Invoke("Join Coin", coin, pets)
		for i, v in pets do
			spawn(function()
				Fire("Farm Coin", coin, v)
			end)
		end
	end

	local function AutoFarm()
		while ChangingVariables.Farming do
			GetFarmPets()
			GetFarmCoins()
			if #ChangingVariables.FarmPets >= 1 then
				if ChangingVariables.SentAllPets then
					if ChangingVariables.Farming then
						spawn(function()
							if not (#ChangingVariables.FarmCoins <= 0) then
								local coin = ChangingVariables.FarmCoins[math.random(1,#ChangingVariables.FarmCoins)]
								local coinChanged = false
								local coinBoost = 0
								local coinHP = 0
								local HasRequiredCoin = false
								if not (ChangingVariables.SecondFarmMode == "") then
									for i, v in ChangingVariables.FarmCoins do
										pcall(function()
											if ChangingVariables.SecondFarmMode == "Highest Coin Multiplier" then
												if v.Boost then
													if v.BoostM > coinBoost then
														coinChanged = true
														coinBoost = v.BoostM
														HasRequiredCoin = true
														coin = v
													end
												end
											elseif ChangingVariables.SecondFarmMode == "Highest Hitpoint" then
												if v.Hitpoints > coinHP then
													coinHP = v.Hitpoints
													HasRequiredCoin = true
													coin = v
												end
											elseif ChangingVariables.SecondFarmMode == "Fruits" then
												if v.Name == "Pear" or v.Name == "Banana" or v.Name == "Orange" or v.Name == "Apple" or v.Name == "Pineapple" or v.Name == "Rainbow Fruit" then
													HasRequiredCoin = true
													coinChanged = true
													coin = v
												else
													if v.Boost and not coinChanged then
														if v.BoostM > coinBoost then
															coinBoost = v.BoostM
															coin = v
														end
													end
												end
											elseif string.find(v.Name, ChangingVariables.SecondFarmMode) then
												HasRequiredCoin = true
												coinChanged = true
												coin = v
											else
												if v.Boost and not coinChanged then
													if v.BoostM > coinBoost then
														coinBoost = v.BoostM
														coin = v
													end
												end
											end
											pcall(function()
												if ChangingVariables.FarmMode == "Highest Coin Multiplier" then
													if v.Boost then
														if v.BoostM > coinBoost then
															HasRequiredCoin = true
															coinBoost = v.BoostM
															coin = v
														end
													end
												elseif ChangingVariables.FarmMode == "Highest Hitpoint" then
													if v.Hitpoints > coinHP then
														coinHP = v.Hitpoints
														HasRequiredCoin = true
														coin = v
													end
												elseif ChangingVariables.FarmMode == "Fruits" then
													if v.Name == "Pear" or v.Name == "Banana" or v.Name == "Orange" or v.Name == "Apple" or v.Name == "Pineapple" or v.Name == "Rainbow Fruit" then
														HasRequiredCoin = true
														coin = v
													end
												elseif string.find(v.Name, ChangingVariables.FarmMode) then
													HasRequiredCoin = true
													coin = v
												end
											end)
										end)
									end
									if ChangingVariables.FarmHop == true and not HasRequiredCoin then
										for i = 1,60 do
											if #workspace["__THINGS"].Orbs:GetChildren() > 0 or #workspace["__THINGS"].Lootbags:GetChildren() > 0 then
												wait(1)
											end
										end
										SendEndCurrencyHook()
										serverHop()
									end
									spawn(function()
										if ChangingVariables.FarmTP == true then
											local TPZone = coin.Position
											if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - TPZone).Magnitude >= 350 then
												game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(TPZone + Vector3.new(0,50,0))
											end
										end
										local pets = {}
										for i, v in pairs(ChangingVariables.FarmPets) do
											table.insert(pets, v)
										end
										SentFarmPets(pets, coin.ID)
										for i, v in ChangingVariables.FarmCoins do
											if v == coin then
												table.remove(ChangingVariables.FarmCoins, i)
											end
										end
									end)
								end
							end
						end)
						wait(ChangingVariables.AutoFarmSentPetCD)
					end
				else
					local HasRequiredCoin = false
					local usedpets = {}
					for i, v in ChangingVariables.FarmPets do
						table.insert(usedpets, v)
						if ChangingVariables.Farming then
							spawn(function()
								if not (#ChangingVariables.FarmCoins <= 0) then
									local coin = ChangingVariables.FarmCoins[math.random(1,#ChangingVariables.FarmCoins)]
									local coinChanged = false
									local coinBoost = 0
									local coinHP = 0
									if not (ChangingVariables.SecondFarmMode == "") then
										for i, v in ChangingVariables.FarmCoins do
											pcall(function()
												if ChangingVariables.SecondFarmMode == "Highest Coin Multiplier" then
													if v.Boost then
														if v.BoostM > coinBoost then
															coinChanged = true
															coinBoost = v.BoostM
															HasRequiredCoin = true
															coin = v
														end
													end
												elseif ChangingVariables.SecondFarmMode == "Highest Hitpoint" then
													if v.Hitpoints > coinHP then
														coinHP = v.Hitpoints
														HasRequiredCoin = true
														coin = v
													end
												elseif ChangingVariables.SecondFarmMode == "Fruits" then
													if v.Name == "Pear" or v.Name == "Banana" or v.Name == "Orange" or v.Name == "Apple" or v.Name == "Pineapple" or v.Name == "Rainbow Fruit" then
														HasRequiredCoin = true
														coinChanged = true
														coin = v
													else
														if v.Boost and not coinChanged then
															if v.BoostM > coinBoost then
																coinBoost = v.BoostM
																coin = v
															end
														end
													end
												elseif string.find(v.Name, ChangingVariables.SecondFarmMode) then
													HasRequiredCoin = true
													coinChanged = true
													coin = v
												else
													if v.Boost and not coinChanged then
														if v.BoostM > coinBoost then
															coinBoost = v.BoostM
															coin = v
														end
													end
												end
												pcall(function()
													if ChangingVariables.FarmMode == "Highest Coin Multiplier" then
														if v.Boost then
															if v.BoostM > coinBoost then
																HasRequiredCoin = true
																coinBoost = v.BoostM
																coin = v
															end
														end
													elseif ChangingVariables.SecondFarmMode == "Highest Hitpoint" then
														if v.Hitpoints > coinHP then
															coinHP = v.Hitpoints
															HasRequiredCoin = true
															coin = v
														end
													elseif ChangingVariables.FarmMode == "Fruits" then
														if v.Name == "Pear" or v.Name == "Banana" or v.Name == "Orange" or v.Name == "Apple" or v.Name == "Pineapple" or v.Name == "Rainbow Fruit" then
															HasRequiredCoin = true
															coin = v
														end
													elseif string.find(v.Name, ChangingVariables.FarmMode) then
														HasRequiredCoin = true
														coin = v
													end
												end)
											end)
										end
										spawn(function()
											if ChangingVariables.FarmTP == true then
												local TPZone = coin.Position
												if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - TPZone).Magnitude >= 350 then
													game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(TPZone + Vector3.new(0,50,0))
												end
											end
											SentFarmPet(v, coin.ID)
											for i, v in ChangingVariables.FarmCoins do
												if v == coin then
													table.remove(ChangingVariables.FarmCoins, i)
												end
											end
											if #ChangingVariables.FarmCoins == 1 then
												local needpets = ChangingVariables.FarmPets
												for _,v in usedpets do
													for i,vv in needpets do
														if vv == v then
															table.remove(needpets,i)
														end
													end
												end
												wait(ChangingVariables.AutoFarmSentPetCD)
												SentFarmPets(needpets, coin.ID)
											end
										end)
									end
								end
							end)
							wait(ChangingVariables.AutoFarmSentPetCD)
						end
					end
					if ChangingVariables.FarmHop == true and not HasRequiredCoin then
						for i = 1,60 do
							if #workspace["__THINGS"].Orbs:GetChildren() > 0 or #workspace["__THINGS"].Lootbags:GetChildren() > 0 then
								wait(1)
							end
						end
						SendEndCurrencyHook()
						serverHop()
					end
				end
			end
			wait(ChangingVariables.AutoFarmCD)
		end
	end

	local function AutoCollectLootbags()
		local LootBags = workspace["__THINGS"].Lootbags
		while ChangingVariables.CollectLootbags do
			if #LootBags:GetChildren() > 0 then
				for i, v in pairs(LootBags:GetChildren()) do
					Fire("Collect Lootbag", v.Name, v.Position)
				end
			end
			wait()
		end
	end

	local function AutoCollectOrbs()
		local orbs = workspace["__THINGS"].Orbs
		while ChangingVariables.CollectOrbs do
			if #orbs:GetChildren() > 0 then
				local orbss = {}
				for i, v in pairs(orbs:GetChildren()) do
					table.insert(orbss, v.Name)
				end
				Fire("Claim Orbs", orbss)
			end
			wait()
		end
	end

	local AreasLabel = Section:NewLabel("Choosed areas:")

	local AreasDropdownList

	AreasDropdownList = Section:NewDropdown("Select an Area", "Click to select an area to autofarm.", {}, function(currentOption)
		if table.find(ChangingVariables.FarmAreas, currentOption) then
			for i,v in ChangingVariables.FarmAreas do
				if v == currentOption then
					table.remove(ChangingVariables.FarmAreas, i)
				end
			end
		else
			table.insert(ChangingVariables.FarmAreas, currentOption)
		end
		local ars = ""
		for i, v in ChangingVariables.FarmAreas do
			ars = ars..v..", "
		end
		AreasLabel:UpdateLabel("Choosed areas: "..ars)
	end)

	local function UpdateAreas()
		table.clear(Areas)
		for i, v in pairs(workspace:WaitForChild("__MAP").Boxes:GetChildren()) do
			table.insert(Areas, v.Name)
		end
		AreasDropdownList:Refresh(Areas)
	end

	UpdateAreas()
	Section:NewButton("Update Areas", "Click to update current areas.", function()
		UpdateAreas()
		for k in ChangingVariables.FarmAreas do
			ChangingVariables.FarmAreas[k] = nil
		end
		AreasLabel:UpdateLabel("Choosed areas: ")
	end)

	Section:NewToggle("Farming Zone", "Farm around you", function(state)
		if state then
			ChangingVariables.FarmZone = true
			AreasLabel:UpdateLabel("Choosed Farming Zone")
		else
			ChangingVariables.FarmZone = false
			AreasLabel:UpdateLabel("Choosed areas: ")
		end
	end)

	Section:NewSlider("Farming Zone Dist", "Farming Zone Distance (30 as default)", 35, 1, function(s)
		ChangingVariables.FarmZoneDist = s
	end)

	Section:NewSlider("Sent pet cd", "Pet sending cd in ms", 1000, 0, function(s)
		ChangingVariables.AutoFarmSentPetCD = s/1000
	end)

	Section:NewSlider("Auto Farm cd", "Auto farm cd in ms", 5000, 0, function(s)
		ChangingVariables.AutoFarmCD = s/1000
	end)

	Section:NewToggle("Start Autofarm", "Click to start autofarm.", function(state)
		if state then
			ChangingVariables.Farming = true
			spawn(AutoFarm)
		else
			ChangingVariables.Farming = false
		end
	end)

	Section:NewToggle("Sent All Pets", "Click to sent all pets in autofarm.", function(state)
		if state then
			ChangingVariables.SentAllPets = true
		else
			ChangingVariables.SentAllPets = false
		end
	end)

	Section:NewToggle("TP To Farm Coins", "Teleport to farm coins when it need", function(state)
		if state then
			ChangingVariables.FarmTP = true
		else
			ChangingVariables.FarmTP = false
		end
	end)

	local AreasDropdownList = Section:NewDropdown("Select Farming Mode", "Click to select a mode to autofarm.", {unpack(FarmModes)}, function(currentOption)
		ChangingVariables.FarmMode = currentOption
	end)

	local AreasDropdownList = Section:NewDropdown("Select Second FMode", "Click to select a second mode (not necessary).", {unpack(FarmModes)}, function(currentOption)
		ChangingVariables.SecondFarmMode = currentOption
	end)

	local ExAreasLabel = Section:NewLabel("Excluded coins:")

	local ExcludedCoinsDropdown

	ExcludedCoinsDropdown = Section:NewDropdown("Exclude coins", "Exclude coins to farm", {}, function(currentOption)
		if table.find(ChangingVariables.ExcludedCoins, currentOption) then
			for i,v in ChangingVariables.ExcludedCoins do
				if v == currentOption then
					table.remove(ChangingVariables.ExcludedCoins, i)
				end
			end
		else
			table.insert(ChangingVariables.ExcludedCoins, currentOption)
		end
		local ars = ""
		for i, v in ChangingVariables.ExcludedCoins do
			ars = ars..v..", "
		end
		ExAreasLabel:UpdateLabel("Excluded coins: "..ars)
	end)

	local function UpdateExcludedCoins()
		table.clear(WorldCoins)
		CurrentWorld = require(game:GetService("ReplicatedStorage").Library.Client.Save).Get().World
		pcall(function()
			for _,v in game:GetService("ReplicatedStorage")["__DIRECTORY"].Coins[CurrentWorld]:GetChildren() do
				for _,v in v:GetChildren() do
					table.insert(WorldCoins, v.Name)
				end
			end
		end)
		ExcludedCoinsDropdown:Refresh(WorldCoins)
	end
	UpdateExcludedCoins()

	Section:NewButton("Update Coins", "Click to update coins to exclude.", function()
		UpdateExcludedCoins()
		ExAreasLabel:UpdateLabel("Excluded coins: ")
		for k in ChangingVariables.ExcludedCoins do
			ChangingVariables.ExcludedCoins[k] = nil
		end
		AreasLabel:UpdateLabel("Excluded coins: ")
	end)

	Section:NewToggle("Auto Collect Lootbags", "Click to collect lootbags instantly.", function(state)
		if state then
			ChangingVariables.CollectLootbags = true
			spawn(AutoCollectLootbags)
		else
			ChangingVariables.CollectLootbags = false
		end
	end)

	Section:NewToggle("Auto Collect Orbs", "Click to collect orbs instantly.", function(state)
		if state then
			ChangingVariables.CollectOrbs = true
			spawn(AutoCollectOrbs)
		else
			ChangingVariables.CollectOrbs = false
		end
	end)

	Section:NewToggle("Server Hop", "if no required resources for farming, will be a hop server.", function(state)
		if state then
			ChangingVariables.FarmHop = true
		else
			ChangingVariables.FarmHop = false
		end
	end)


	local Tab = Window:NewTab("Machines")
	local Section = Tab:NewSection("Machines")
	Section:NewSlider("Making Delay", "Making Pets Delay in ms", 5000, 0, function(s)
		ChangingVariables.MakingCD = s/1000
	end)
	Section:NewLabel("Golden")

	local function StartGolden()
		if ChangingVariables.MakingGolden == true then
			if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Gold Machine") then
				Library.WorldCmds.Load("Spawn")
				wait(1)
			end
			if (LocalPlayer.Character.HumanoidRootPart.Position - Library.WorldCmds.GetMap().Interactive["Gold Machine"].Pad.Position).Magnitude >= 50 then
				LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive["Gold Machine"].Pad.CFrame + Vector3.new(0, 3, 0)
			end
		end
		local NormalPets = {}
		for i, vv in Pets do
			if not vv.g and not vv.r and not vv.dm then
				if ChangingVariables.GoldenHardcore then
					if vv.hc then
						local isnotmyth = false
						for i, v in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Pets:GetChildren()) do
							if string.sub(v.Name, 1, string.len(vv.id)) == vv.id then
								for i, v in pairs(v:GetChildren()) do
									if v:IsA("ModuleScript") then
										local petinfo = require(v)
										if petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" or petinfo.rarity == "Mythical" or petinfo.rarity == "Secret" then
											if ChangingVariables.GoldenSecrets then
												isnotmyth = true
											elseif petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" or petinfo.rarity == "Mythical" then
												isnotmyth = true
											end
										end
									end
								end
							end
						end
						if isnotmyth then
							if ChangingVariables.GoldenShiny then
								if vv.sh and vv.sh == true then
									table.insert(NormalPets, {ID = vv.id, UID = vv.uid})
								end
							else
								table.insert(NormalPets, {ID = vv.id, UID = vv.uid})
							end
						end
					end
				else
					if not vv.hc then
						local isnotmyth = false
						for i, v in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Pets:GetChildren()) do
							if string.sub(v.Name, 1, string.len(vv.id)) == vv.id then
								for i, v in pairs(v:GetChildren()) do
									if v:IsA("ModuleScript") then
										local petinfo = require(v)
										if petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" or petinfo.rarity == "Mythical" or petinfo.rarity == "Secret" then
											if ChangingVariables.GoldenSecrets then
												isnotmyth = true
											elseif petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" or petinfo.rarity == "Mythical" then
												isnotmyth = true
											end
										end
									end
								end
							end
						end
						if isnotmyth then
							if ChangingVariables.GoldenShiny then
								if vv.sh and vv.sh == true then
									table.insert(NormalPets, {ID = vv.id, UID = vv.uid})
								end
							else
								table.insert(NormalPets, {ID = vv.id, UID = vv.uid})
							end
						end
					end
				end
			end
		end
		while ChangingVariables.MakingGolden and if ChangingVariables.GoldenHardcore then #NormalPets >= ChangingVariables.GoldenHardcoreAmount else #NormalPets >= ChangingVariables.GoldenAmount do
			local NeedPets = {}
			local NeedPetsAmount = 10
			local NeedPetID = NormalPets[1].ID
			local PetsCount = #Pets
			if ChangingVariables.GoldenHardcore then
				NeedPetsAmount = ChangingVariables.GoldenHardcoreAmount
			else
				NeedPetsAmount = ChangingVariables.GoldenAmount
			end
			for i, v in NormalPets do
				if v.ID == NeedPetID and #NeedPets < NeedPetsAmount then
					table.insert(NeedPets, v.UID)
				end
			end
			for i, v in NeedPets do
				for i, vv in NormalPets do
					if NormalPets[i].UID == v then
						table.remove(NormalPets, i)
					end
				end
			end
			if #NeedPets == NeedPetsAmount then
				while #Pets >= PetsCount and ChangingVariables.MakingGolden do
					spawn(function()
						Invoke("Use Golden Machine", NeedPets)
					end)
					wait()
				end
				wait(ChangingVariables.MakingCD)
			end
			wait()
		end
	end

	local function StartRainbow()
		if ChangingVariables.MakingRainbow == true then
			if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Rainbow Machine") then
				Library.WorldCmds.Load("Spawn")
				wait(1)
			end
			if (LocalPlayer.Character.HumanoidRootPart.Position - Library.WorldCmds.GetMap().Interactive["Rainbow Machine"].Pad.Position).Magnitude >= 50 then
				LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive["Rainbow Machine"].Pad.CFrame + Vector3.new(0, 3, 0)
			end
		end
		local GoldenPets = {}
		for i, vv in Pets do
			if vv.g and not vv.r and not vv.dm then
				if ChangingVariables.RainbowHardcore then
					if vv.hc then
						local isnotmyth = false
						for i, v in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Pets:GetChildren()) do
							if string.sub(v.Name, 1, string.len(vv.id)) == vv.id then
								for i, v in pairs(v:GetChildren()) do
									if v:IsA("ModuleScript") then
										local petinfo = require(v)
										if petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" or petinfo.rarity == "Mythical" or petinfo.rarity == "Secret" then
											if ChangingVariables.GoldenSecrets then
												isnotmyth = true
											elseif petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" or petinfo.rarity == "Mythical" then
												isnotmyth = true
											end
										end
									end
								end
							end
						end
						if isnotmyth then
							if ChangingVariables.RainbowShiny then
								if vv.sh and vv.sh == true then
									table.insert(GoldenPets, {ID = vv.id, UID = vv.uid})
								end
							else
								table.insert(GoldenPets, {ID = vv.id, UID = vv.uid})
							end
						end
					end
				else
					if not vv.hc then
						local isnotmyth = false
						for i, v in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Pets:GetChildren()) do
							if string.sub(v.Name, 1, string.len(vv.id)) == vv.id then
								for i, v in pairs(v:GetChildren()) do
									if v:IsA("ModuleScript") then
										local petinfo = require(v)
										if petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" or petinfo.rarity == "Mythical" or petinfo.rarity == "Secret" then
											if ChangingVariables.GoldenSecrets then
												isnotmyth = true
											elseif petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" or petinfo.rarity == "Mythical" then
												isnotmyth = true
											end
										end
									end
								end
							end
						end
						if isnotmyth then
							if ChangingVariables.RainbowShiny then
								if vv.sh and vv.sh == true then
									table.insert(GoldenPets, {ID = vv.id, UID = vv.uid})
								end
							else
								table.insert(GoldenPets, {ID = vv.id, UID = vv.uid})
							end
						end
					end
				end
			end
		end
		while ChangingVariables.MakingRainbow and if ChangingVariables.RainbowHardcore then #GoldenPets >= ChangingVariables.RainbowHardcoreAmount else #GoldenPets >= ChangingVariables.RainbowAmount do
			local NeedPets = {}
			local NeedPetsAmount = 10
			local NeedPetID = GoldenPets[1].ID
			local PetsCount = #Pets
			if ChangingVariables.RainbowHardcore then
				NeedPetsAmount = ChangingVariables.RainbowHardcoreAmount
			else
				NeedPetsAmount = ChangingVariables.RainbowAmount
			end
			for i, v in GoldenPets do
				if v.ID == NeedPetID and #NeedPets < NeedPetsAmount then
					table.insert(NeedPets, v.UID)
				end
			end
			for i, v in NeedPets do
				for i, vv in GoldenPets do
					if GoldenPets[i].UID == v then
						table.remove(GoldenPets, i)
					end
				end
			end
			if #NeedPets == NeedPetsAmount then
				while #Pets >= PetsCount and ChangingVariables.MakingRainbow do
					spawn(function()
						Invoke("Use Rainbow Machine", NeedPets)
					end)
					wait()
				end
				wait(ChangingVariables.MakingCD)
			end
			wait()
		end
	end

	local function StartDM()
		if ChangingVariables.MakingDM == true then
			if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Dark Matter Machine") then
				Library.WorldCmds.Load("Tech")
				wait(1)
			end
			if (LocalPlayer.Character.HumanoidRootPart.Position - Library.WorldCmds.GetMap().Interactive["Dark Matter Machine"].Pad.Position).Magnitude >= 50 then
				LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive["Dark Matter Machine"].Pad.CFrame + Vector3.new(0, 3, 0)
			end
		end
		local RainbowPets = {}
		local ShinyRainbowPets = {}
		for i, vv in Pets do
			if not vv.g and vv.r and not vv.dm then
				if ChangingVariables.DMHardcore then
					if vv.hc then
						local isnotmyth = false
						for i, v in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Pets:GetChildren()) do
							if string.sub(v.Name, 1, string.len(vv.id)) == vv.id then
								for i, v in pairs(v:GetChildren()) do
									if v:IsA("ModuleScript") then
										local petinfo = require(v)
										if petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" or petinfo.rarity == "Mythical" or petinfo.rarity == "Secret" then
											if ChangingVariables.GoldenSecrets then
												isnotmyth = true
											elseif petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" or petinfo.rarity == "Mythical" then
												isnotmyth = true
											end
										end
									end
								end
							end
						end
						if isnotmyth then
							if ChangingVariables.DMShiny then
								if vv.sh and vv.sh == true then
									print("Shiny founded")
									table.insert(ShinyRainbowPets, {ID = vv.id, UID = vv.uid})
								else
									table.insert(RainbowPets, {ID = vv.id, UID = vv.uid})
								end
							else
								table.insert(RainbowPets, {ID = vv.id, UID = vv.uid})
							end
						end
					end
				else
					if not vv.hc then
						local isnotmyth = false
						for i, v in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Pets:GetChildren()) do
							if string.sub(v.Name, 1, string.len(vv.id)) == vv.id then
								for i, v in pairs(v:GetChildren()) do
									if v:IsA("ModuleScript") then
										local petinfo = require(v)
										if petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" or petinfo.rarity == "Mythical" or petinfo.rarity == "Secret" then
											if ChangingVariables.GoldenSecrets then
												isnotmyth = true
											elseif petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" or petinfo.rarity == "Mythical" then
												isnotmyth = true
											end
										end
									end
								end
							end
						end
						if isnotmyth then
							if ChangingVariables.DMShiny then
								if vv.sh and vv.sh == true then
									print("Shiny founded")
									table.insert(ShinyRainbowPets, {ID = vv.id, UID = vv.uid})
								else
									table.insert(RainbowPets, {ID = vv.id, UID = vv.uid})
								end
							else
								table.insert(RainbowPets, {ID = vv.id, UID = vv.uid})
							end
						end
					end
				end
			end
		end
		while ChangingVariables.MakingDM and if ChangingVariables.DMHardcore then #RainbowPets >= ChangingVariables.DMHardcoreAmount else #RainbowPets >= ChangingVariables.DMAmount do
			local NeedPets = {}
			local NeedPetsAmount = 10
			local NeedPetID = RainbowPets[1].ID
			local PetsCount = #Pets
			local wasshiny = false
			if ChangingVariables.DMHardcore then
				NeedPetsAmount = ChangingVariables.DMHardcoreAmount
			else
				NeedPetsAmount = ChangingVariables.DMAmount
			end
			if ChangingVariables.DMShiny then
				for i,v in ShinyRainbowPets do
					if v.ID == NeedPetID and not wasshiny then
						table.insert(NeedPets, ShinyRainbowPets[i].UID)
						table.remove(ShinyRainbowPets, i)
						wasshiny = true
					end
				end
			end
			for i, v in RainbowPets do
				if v.ID == NeedPetID and #NeedPets < NeedPetsAmount then
					table.insert(NeedPets, v.UID)
				end
			end
			for i, v in NeedPets do
				for i, vv in RainbowPets do
					if RainbowPets[i].UID == v then
						table.remove(RainbowPets, i)
					end
				end
			end
			if #NeedPets == NeedPetsAmount then
				if ChangingVariables.DMShiny then
					if wasshiny then
						while #Pets >= PetsCount and ChangingVariables.MakingDM do
							spawn(function()
								Invoke("Convert To Dark Matter", NeedPets)
							end)
							wait()
						end
					end
				else
					while #Pets >= PetsCount and ChangingVariables.MakingDM do
						spawn(function()
							Invoke("Convert To Dark Matter", NeedPets)
						end)
						wait()
					end
				end
			end
			wait()
		end
	end

	local function ClaimDM()
		if ChangingVariables.ClaimingDM == true then
			if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Dark Matter Machine") then
				Library.WorldCmds.Load("Tech")
				wait(1)
			end
			if (LocalPlayer.Character.HumanoidRootPart.Position - Library.WorldCmds.GetMap().Interactive["Dark Matter Machine"].Pad.Position).Magnitude >= 50 then
				LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive["Dark Matter Machine"].Pad.CFrame + Vector3.new(0, 3, 0)
			end
		end
		DMPets = require(game:GetService("ReplicatedStorage").Library.Client.Save).Get().DarkMatterQueue
		for k in DMPets do
			if ChangingVariables.ClaimingDM then
				spawn(function()
					Invoke("Redeem Dark Matter Pet", k)
				end)
				wait()
			end
		end
	end

	local function StartFuse()
		if ChangingVariables.Fusing == true then
			if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Fuse Pets") then
				Library.WorldCmds.Load("Spawn")
				wait(1)
			end
			LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive["Fuse Pets"].Pad.CFrame + Vector3.new(0, 3, 0) 
		end
		while ChangingVariables.Fusing do
			local FusePets = {}
			for i, vv in Pets do
				if ChangingVariables.FuseHardcore then
					if not vv.hc then
					else
						local isnotmyth = false
						for i, v in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Pets:GetChildren()) do
							if string.sub(v.Name, 1, string.len(vv.id)) == vv.id then
								for i, v in pairs(v:GetChildren()) do
									if v:IsA("ModuleScript") then
										local petinfo = require(v)
										if petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" then
											isnotmyth = true
										end
									end
								end
							end
						end
						if isnotmyth then
							if not ChangingVariables.FuseShiny then
								if not vv.sh then
									table.insert(FusePets, {Power = vv.s, UID = vv.uid})
								end
							else
								table.insert(FusePets, {Power = vv.s, UID = vv.uid})
							end
						end
					end
				else
					local isnotmyth = false
					for i, v in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Pets:GetChildren()) do
						if string.sub(v.Name, 1, string.len(vv.id)) == vv.id then
							for i, v in pairs(v:GetChildren()) do
								if v:IsA("ModuleScript") then
									local petinfo = require(v)
									if petinfo.rarity == "Basic" or petinfo.rarity == "Rare" or petinfo.rarity == "Epic" or petinfo.rarity == "Legendary" then
										isnotmyth = true
									end
								end
							end
						end
					end
					if isnotmyth then
						if not ChangingVariables.FuseShiny then
							if vv.sh and vv.sh == true then
								table.insert(FusePets, {Power = vv.s, UID = vv.uid})
							end
						else
							table.insert(FusePets, {Power = vv.s, UID = vv.uid})
						end
					end
				end
			end
			table.sort(FusePets, function(k1, k2) return k1.Power < k2.Power end)
			while ChangingVariables.Fusing and #FusePets >= ChangingVariables.FuseAmount do
				local NeedPets = {}
				local NeedPetsAmount = ChangingVariables.FuseAmount
				local PetsCount = #Pets
				for i, v in FusePets do
					if #NeedPets < NeedPetsAmount then
						table.insert(NeedPets, v.UID)
					end
				end
				for i, v in NeedPets do
					for i, vv in FusePets do
						if FusePets[i].UID == v then
							table.remove(FusePets, i)
						end
					end
				end
				if #NeedPets == NeedPetsAmount then
					spawn(function()
						Invoke("Fuse Pets", NeedPets)
					end)
				end
				wait()
			end
			wait()
		end
	end

	Section:NewToggle("Start Golden", "Click to start making a golden pets", function(state)
		if state then
			ChangingVariables.MakingGolden = true
			spawn(StartGolden)
		else
			ChangingVariables.MakingGolden = false
		end
	end)

	Section:NewSlider("Amount", "Pets amount", 6, 1, function(s)
		ChangingVariables.GoldenAmount = s
	end)

	Section:NewToggle("Only Hardcore Pets", "Click to use hardcore pets", function(state)
		if state then
			ChangingVariables.GoldenHardcore = true
		else
			ChangingVariables.GoldenHardcore = false
		end
	end)

	Section:NewSlider("Hardcore Amount", "Hardcore pets amount", 10, 1, function(s)
		ChangingVariables.GoldenHardcoreAmount = s
	end)

	Section:NewToggle("Only Shiny Pets", "Click to use Shiny pets", function(state)
		if state then
			ChangingVariables.GoldenShiny = true
		else
			ChangingVariables.GoldenShiny = false
		end
	end)

	Section:NewToggle("Only Secret Pets", "Click to use Secret pets", function(state)
		if state then
			ChangingVariables.GoldenSecrets = true
		else
			ChangingVariables.GoldenSecrets = false
		end
	end)
	Section:NewLabel("Rainbow")

	Section:NewToggle("Start Rainbow", "Click to start making a rainbow pets", function(state)
		if state then
			ChangingVariables.MakingRainbow = true
			spawn(StartRainbow)
		else
			ChangingVariables.MakingRainbow = false
		end
	end)

	Section:NewSlider("Amount", "Pets amount", 6, 1, function(s)
		ChangingVariables.RainbowAmount = s
	end)

	Section:NewToggle("Only Hardcore Pets", "Click to use hardcore pets", function(state)
		if state then
			ChangingVariables.RainbowHardcore = true
		else
			ChangingVariables.RainbowHardcore = false
		end
	end)

	Section:NewSlider("Hardcore Amount", "Hardcore pets amount", 10, 1, function(s)
		ChangingVariables.RainbowHardcoreAmount = s
	end)

	Section:NewToggle("Only Shiny Pets", "Click to use Shiny pets", function(state)
		if state then
			ChangingVariables.RainbowShiny = true
		else
			ChangingVariables.RainbowShiny = false
		end
	end)

	Section:NewToggle("Only Secret Pets", "Click to use Secret pets", function(state)
		if state then
			ChangingVariables.RainbowSecrets = true
		else
			ChangingVariables.RainbowSecrets = false
		end
	end)

	Section:NewLabel("Dark Matter")

	Section:NewToggle("Start Dark Matter", "Click to start making a DM pets", function(state)
		if state then
			ChangingVariables.MakingDM = true
			spawn(StartDM)
		else
			ChangingVariables.MakingDM = false
		end
	end)

	Section:NewToggle("Start Claim Pets", "Click to start claim a DM pets", function(state)
		if state then
			ChangingVariables.ClaimingDM = true
			spawn(ClaimDM)
		else
			ChangingVariables.ClaimingDM = false
		end
	end)

	Section:NewSlider("Amount", "Pets amount", 6, 1, function(s)
		ChangingVariables.DMAmount = s
	end)

	Section:NewToggle("Only Hardcore Pets", "Click to use hardcore pets", function(state)
		if state then
			ChangingVariables.DMHardcore = true
		else
			ChangingVariables.DMHardcore = false
		end
	end)

	Section:NewSlider("Hardcore Amount", "Hardcore pets amount", 10, 1, function(s)
		ChangingVariables.DMHardcoreAmount = s
	end)

	Section:NewToggle("Use Shiny Pets", "Click to use Shiny pets", function(state)
		if state then
			ChangingVariables.DMShiny = true
		else
			ChangingVariables.DMShiny = false
		end
	end)

	Section:NewToggle("Only Secret Pets", "Click to use Secret pets", function(state)
		if state then
			ChangingVariables.DMSecrets = true
		else
			ChangingVariables.DMSecrets = false
		end
	end)
	Section:NewLabel("Fusing")
	Section:NewToggle("Start Fuse", "Click to start fuse pets", function(state)
		if state then
			ChangingVariables.Fusing = true
			spawn(StartFuse)
		else
			ChangingVariables.Fusing = false
		end
	end)
	Section:NewToggle("Only Hardcore Pets", "Use Hardcore Pets", function(state)
		if state then
			ChangingVariables.FuseHardcore = true
		else
			ChangingVariables.FuseHardcore = false
		end
	end)
	Section:NewToggle("Only Shiny Pets", "Use Shiny Pets", function(state)
		if state then
			ChangingVariables.FuseShiny = true
		else
			ChangingVariables.FuseShiny = false
		end
	end)
	Section:NewSlider("Fuse Amount", "Fuse pets amount", 12, 3, function(s)
		ChangingVariables.FuseAmount = s
	end)

	local Tab = Window:NewTab("Teleports")
	local Section = Tab:NewSection("Teleports")

	Section:NewButton("Bank", "Teleport to the Bank", function()
		if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Bank") then
			Library.WorldCmds.Load("Spawn")
			wait(1)
		end
		LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive.Bank.Pad.CFrame + Vector3.new(0, 3, 0)
	end)

	Section:NewButton("Mailbox", "Teleport to the Mailbox", function()
		if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Mailbox") then
			Library.WorldCmds.Load("Spawn")
			wait(1)
		end
		LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive.Mailbox.Pad.CFrame + Vector3.new(0, 3, 0)
	end)

	Section:NewButton("Daycare", "Teleport to the Daycare", function()
		if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Daycare") then
			Library.WorldCmds.Load("Spawn")
			wait(1)
		end
		LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive.Daycare.Pad.CFrame + Vector3.new(0, 3, 0)
	end)

	Section:NewButton("Upgrade Station", "Teleport to the Upgrade Station", function()
		if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Upgrade Station") then
			Library.WorldCmds.Load("Spawn")
			wait(1)
		end
		LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive["Upgrade Station"].Pad.CFrame + Vector3.new(0, 3, 0)
	end)

	Section:NewButton("Fuse Pets", "Teleport to the Fuse Pets Machine", function()
		if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Fuse Pets") then
			Library.WorldCmds.Load("Spawn")
			wait(1)
		end
		LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive["Fuse Pets"].Pad.CFrame + Vector3.new(0, 3, 0)
	end)

	Section:NewButton("Gold Machine", "Teleport to the Gold Machine", function()
		if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Gold Machine") then
			Library.WorldCmds.Load("Spawn")
			wait(1)
		end
		LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive["Gold Machine"].Pad.CFrame + Vector3.new(0, 3, 0)
	end)

	Section:NewButton("Rainbow Machine", "Teleport to the Rainbow Machine", function()
		if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Rainbow Machine") then
			Library.WorldCmds.Load("Spawn")
			wait(1)
		end
		LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive["Rainbow Machine"].Pad.CFrame + Vector3.new(0, 3, 0)
	end)

	Section:NewButton("DM Machine", "Teleport to the Dark Matter Machine", function()
		if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Dark Matter Machine") then
			Library.WorldCmds.Load("Tech")
			wait(1)
		end
		LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive["Dark Matter Machine"].Pad.CFrame + Vector3.new(0, 3, 0)
	end)

	Section:NewButton("Huge Machine", "Teleport to the Huge Machine", function()
		if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Huge Machine") then
			Library.WorldCmds.Load("Spawn")
			wait(1)
		end
		LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive["Huge Machine"].Pad.CFrame + Vector3.new(0, 3, 0)
	end)

	Section:NewButton("Evolve Machine", "Teleport to the Huge Machine", function()
		if not Library.WorldCmds.GetMap().Interactive:FindFirstChild("Evolve Machine") then
			Library.WorldCmds.Load("Spawn")
			wait(1)
		end
		LocalPlayer.Character.HumanoidRootPart.CFrame = Library.WorldCmds.GetMap().Interactive["Evolve Machine"].Pad.CFrame + Vector3.new(0, 3, 0)
	end)

	local Tab = Window:NewTab("Misc")
	local Section = Tab:NewSection("Misc")
	local function StatsTracker()
		if ChangingVariables.STracker then
			local lib = require(game:GetService("ReplicatedStorage").Framework.Library)
			local Save = lib.Save.Get
			local Commas = lib.Functions.Commas
			local Types = {}
			local Menus = game:GetService("Players").LocalPlayer.PlayerGui.Main.Right

			for i,v in pairs(Menus:GetChildren()) do
				if v.ClassName == "Frame" and v.Name ~= "Rank" and not string.find(v.Name, "2") then
					table.insert(Types, v.Name)
				end
			end

			function get(thistype)
				if game.PlaceId == 10321372166 and string.find(string.lower(thistype), "coins") then
					return Save().HardcoreCurrency[thistype]
				else
					return Save()[thistype]
				end
			end
			local MyTypes = {}
			for i,v in pairs(Menus:GetChildren()) do
				if string.find(v.Name, "2") then
					v:Destroy()
				end
			end

			for i,v in pairs(Types) do
				if not Menus:FindFirstChild(v.."2") then
					Menus:WaitForChild(v).LayoutOrder = Menus:WaitForChild(v).LayoutOrder
					local tempmark = Menus:WaitForChild(v):Clone()
					tempmark.Name = tostring(tempmark.Name .. "2")
					tempmark.Size = UDim2.new(tempmark.Size.X.Scale/1.25, tempmark.Size.X.Offset/1.25, tempmark.Size.Y.Scale/1.25, tempmark.Size.Y.Offset/1.25)
					tempmark.Parent = Menus
					tempmark.LayoutOrder = tempmark.LayoutOrder + 1
					tempmark.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
					MyTypes[v] = tempmark
				end
			end

			spawn(function() Menus:WaitForChild("Diamonds2").Add.Visible = false end)
			for i,v in pairs(Types) do
				spawn(function()
					repeat task.wait() until MyTypes[v]
					local megatable = {}
					local imaginaryi = 1
					local ptime = 0
					local last = tick()
					local now = last
					local TICK_TIME = 0.5
					local lastRGB = "255255255"
					local function TweenTrackColor(R,G,B)
						game:GetService("TweenService"):Create(MyTypes[v], TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, false, 0),{
							BackgroundColor3 =  Color3.fromRGB(R,G,B)
						}):Play()
					end
					local RainbowTween = false
					local RGBTrackTween = game:GetService("TweenService"):Create(MyTypes[v], TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true, 0.5),{
						BackgroundColor3 =  Color3.fromRGB(85, 0, 125)
					})
					while true do
						if ptime >= TICK_TIME then
							while ptime >= TICK_TIME do ptime = ptime - TICK_TIME end
							local currentbal = get(v)
							megatable[imaginaryi] = currentbal
							local diffy = currentbal - (megatable[imaginaryi-ChangingVariables.STrackerUPDT] or megatable[1])
							imaginaryi = imaginaryi + 1
							if ChangingVariables.STrackerUPDT >= 60 then
								if ChangingVariables.STrackerUPDT >= 3600 then
									MyTypes[v].Amount.Text = tostring(Commas(diffy).." in "..tonumber(ChangingVariables.STrackerUPDT/3600).."h")
									MyTypes[v].Amount_odometerGUIFX.Text = tostring(Commas(diffy).." in "..tonumber(ChangingVariables.STrackerUPDT/3600).."h")
								else
									MyTypes[v].Amount.Text = tostring(Commas(diffy).." in "..tonumber(ChangingVariables.STrackerUPDT/60).."m")
									MyTypes[v].Amount_odometerGUIFX.Text = tostring(Commas(diffy).." in "..tonumber(ChangingVariables.STrackerUPDT/60).."m")
								end
							else
								MyTypes[v].Amount.Text = tostring(Commas(diffy).." in "..ChangingVariables.STrackerUPDT.."s")
								MyTypes[v].Amount_odometerGUIFX.Text = tostring(Commas(diffy).." in "..ChangingVariables.STrackerUPDT.."s")
							end
							local R = 0
							local G = 0
							local B = 0
							local RGBPerMinute = {
								{Amount=0, Color={R=0, G=0, B=0}},
								{Amount=1000, Color={R=255, G=0, B=0}},
								{Amount=100000, Color={R=255, G=125, B=0}},
								{Amount=1000000, Color={R=255, G=255, B=0}},
								{Amount=10000000, Color={R=0, G=255, B=0}},
								{Amount=100000000, Color={R=0, G=255, B=125}},
								{Amount=1000000000, Color={R=0, G=255, B=255}},
								{Amount=10000000000, Color={R=0, G=0, B=255}},
								{Amount=100000000000, Color={R=125, G=0, B=255}},
								{Amount=500000000000, Color={R=125, G=0, B=85}},
								{Amount=1000000000000, Color={R=255, G=255, B=255}},
							}
							for i,v in RGBPerMinute do
								if diffy >= v.Amount*(ChangingVariables.STrackerUPDT/60) then
									R = v.Color.R
									G = v.Color.G
									B = v.Color.B
								end
							end
							if not (lastRGB == tostring(R..G..B)) then
								if R == 255 and G == 255 and B == 255 then
									RainbowTween = true
									RGBTrackTween:Play()
								else
									if RainbowTween then
										RainbowTween = false
										RGBTrackTween:Cancel()
									end
									lastRGB = tostring(R..G..B)
									spawn(function()
										TweenTrackColor(R,G,B)
									end)
								end
							end
						end
						task.wait()
						now = tick()
						ptime = ptime + (now - last)
						last = now
					end
				end) 
			end
		else
			local Menus = game:GetService("Players").LocalPlayer.PlayerGui.Main.Right
			for i,v in pairs(Menus:GetChildren()) do
				if string.find(v.Name, "2") then
					v:Destroy() 
				end
			end
		end
	end
	Section:NewToggle("Stats Tracker", "Stats Tracker", function(State)
		ChangingVariables.STracker = State
		StatsTracker()
	end)

	Section:NewTextBox("Tracker Time (sec)", "How long to keep info in seconds", function(txt)
		ChangingVariables.STrackerUPDT = tonumber(txt)
	end)

	Section:NewToggle("Turn off render", "Turn off 3d rendering", function(state)
		if state then
			ChangingVariables.Render = false
			game:GetService("RunService"):Set3dRenderingEnabled(false)
		else
			ChangingVariables.Render = true
			game:GetService("RunService"):Set3dRenderingEnabled(true)
		end
	end)

	local function SetFps()
		setfpscap(ChangingVariables.FPS)
	end

	Section:NewTextBox("Set Fps Cap", "Set your custom framerate", function(txt)
		if tonumber(txt) > 0 then
			ChangingVariables.FPS = tonumber(txt)
			SetFps()
		end
	end)

	local RenamePetsName = ""
	local RenameByEnchaments = false

	local RenameTxt = Section:NewLabel('Rename all pets to ""')

	Section:NewTextBox("Name to pets", "Name to pets", function(txt)
		RenamePetsName = tostring(txt)
		RenameTxt:UpdateLabel('Rename all pets to "'..txt..'"')
	end)

	Section:NewToggle("Rename to pets enchantments", "Will rename to enchantment of pet", function(state)
		if state then
			RenameByEnchaments = true
		else
			RenameByEnchaments = false
		end
	end)

	local renaming = false

	Section:NewButton("Rename all pets", "Click to rename all pets", function()
		if not renaming then
			renaming = true
			for i, v in Pets do
				if not (v.nk == RenamePetsName) then
					spawn(function()
						RenameTxt:UpdateLabel("Pets renamed ["..i.."/"..#Pets.."]")
						if RenameByEnchaments then
							local endname = "Enchantment -"
							if v.powers then
								if v.powers[1][1] == "Best Friend" or v.powers[1][1] == "Evolved" or v.powers[1][1] == "Titanic" then
									endname = v.powers[2][1].." "..v.powers[2][2]
								else
									endname = v.powers[1][1].." "..v.powers[1][2]
								end
							end
							Invoke("Rename Pet", v.uid, endname)
						else
							Invoke("Rename Pet", v.uid, RenamePetsName)
						end
					end)
					wait(1)
				end
			end
			RenameTxt:UpdateLabel('Rename all pets to "'..RenamePetsName..'"')
			renaming = false
		end
	end)

	Section:NewButton("Rename equipped pets", "Click to rename equipped pets", function()
		if not renaming then
			renaming = true
			local epc = 0
			local i = 0
			for _ in EquippedPets do
				epc+=1
			end
			for k in EquippedPets do
				i+=1
				spawn(function()
					RenameTxt:UpdateLabel("Pets renamed ["..i.."/"..epc.."]")
					if RenameByEnchaments then
						local endname = ""
						for _,v in Pets do
							if v.uid == k then
								if v.powers then
									if v.powers[1][1] == "Best Friend" or v.powers[1][1] == "Evolved" or v.powers[1][1] == "Titanic" then
										endname = v.powers[2][1].." "..v.powers[2][2]
									else
										endname = v.powers[1][1].." "..v.powers[1][2]
									end
								end
							end
						end
						Invoke("Rename Pet", k, endname)
					else
						Invoke("Rename Pet", k, RenamePetsName)
					end
				end)
				wait(1)
			end
			RenameTxt:UpdateLabel('Rename all pets to "'..RenamePetsName..'"')
			renaming = false
		end
	end)

	Section:NewLabel("Boosts")
	local BAmount = 1
	local SBoost = "Triple Coins"
	Section:NewSlider("Amount to use", "Amount of boosts to use per once", 1000, 0, function(s)
		BAmount = s
	end)

	Section:NewDropdown("Select a boost", "Select a boost to use", {"Triple Coins", "Triple Damage", "Super Lucky", "Ultra Lucky"}, function(currentOption)
		SBoost = currentOption
	end)

	Section:NewButton("Use Boosts", "Click to use boosts", function()
		for i = 1,BAmount do
			spawn(function()
				Fire("Activate Boost", SBoost)
			end)
		end
	end)


	local Tab = Window:NewTab("Trading Plaza")
	local Section = Tab:NewSection("Booth")
	local PetIds1 = {}
	local PetIds2 = {}
	local SellPetInfo = {}
	local SellHardcore, SellShiny, SellDM, SellRainbow, SellGolden = false, false, false, false, false
	local SellPetID = 0

	local BoothPetSelection = Section:NewDropdown("Select a pet to sell", "Select a pet to sell on booth", {}, function(currentOption)
		for i,v in PetIds1 do
			if v == currentOption then
				SellPetID = PetIds2[i]
			end
		end
	end)

	local function UpdatePetsTypes()
		local PetsTypes = {}
		PetIds1 = {}
		PetIds2 = {}
		for _,v in Pets do
			if v.nk then
				local PetInfo = {
					Golden = v.g or false,
					Rainbow = v.r or false,
					DarkMatter = v.dm or false,
					Shiny = v.sh or false,
					Hardcore = v.hc or false,
					ID = v.id,
					Name = ""
				}
				for i, vv in pairs(game:GetService("ReplicatedStorage")["__DIRECTORY"].Pets:GetChildren()) do
					if string.sub(vv.Name, 1, string.len(v.id)) == v.id then
						for i, v in pairs(vv:GetChildren()) do
							if v:IsA("ModuleScript") then
								PetInfo.Name = require(v).name
							end
						end
					end
				end
				local pi = PetInfo.Name
				if not table.find(PetsTypes, pi) then
					table.insert(PetsTypes, pi)
					table.insert(PetIds1, pi)
					table.insert(PetIds2, PetInfo.ID)
				end
			end
		end
		BoothPetSelection:Refresh(PetsTypes)
	end
	UpdatePetsTypes()

	Section:NewButton("Update Dropdown Below", "Update Pets selection to sell", function()
		UpdatePetsTypes()
	end)

	Section:NewToggle("Hardcore", "Click to use Hardcore pets", function(state)
		if state then
			SellHardcore = true
		else
			SellHardcore = false
		end
	end)
	Section:NewToggle("Shiny", "Click to use Shiny pets", function(state)
		if state then
			SellShiny = true
		else
			SellShiny = false
		end
	end)
	Section:NewToggle("Dark Matter", "Click to use Dark Matter pets", function(state)
		if state then
			SellDM = true
		else
			SellDM = false
		end
	end)
	Section:NewToggle("Rainbow", "Click to use Rainbow pets", function(state)
		if state then
			SellRainbow = true
		else
			SellRainbow = false
		end
	end)
	Section:NewToggle("Golden", "Click to use Golden pets", function(state)
		if state then
			SellGolden = true
		else
			SellGolden = false
		end
	end)

	local BoothPetsAmount = 12
	local BoothPetsPrice = 10000000000000
	local function SuffixToMultiplier(num)
		local Suffixes = {
			k = 1000,
			m = 1000000,
			b = 1000000000,
			t = 1000000000000
		}
		local NewNum = num
		for k,v in Suffixes do
			if string.find(NewNum, k) then
				NewNum = string.gsub(NewNum, k, "")
				NewNum = tonumber(NewNum)*v
			end
		end
		return tonumber(NewNum)
	end
	Section:NewSlider("Amount", "Amount to put on the stand", 12, 1, function(s)
		BoothPetsAmount = s
	end)
	Section:NewTextBox("Price", "Price for each pet", function(txt)
		BoothPetsPrice = SuffixToMultiplier(txt)
	end)

	local selling = false
	local function StartSelling()
		local MyPetsCount = 0
		local MyBooth = nil
		local function AddPets()
			local NeedPets = {}
			local BoothPets = {}
			SellPetInfo = {
				Golden = SellGolden,
				Rainbow = SellRainbow,
				DarkMatter = SellDM,
				Shiny = SellShiny,
				Hardcore = SellHardcore,
				ID = SellPetID,
			}
			for k,v in Invoke("Get All Booths")[MyBooth].Listings do
				table.insert(BoothPets, k)
			end
			for i, v in Pets do
				if #NeedPets+MyPetsCount < BoothPetsAmount then
					local IsBPet = false
					for _,vv in BoothPets do
						if vv == v.uid then
							IsBPet = true
						end
					end
					if not IsBPet then
						if v.id == SellPetInfo.ID then
							if SellPetInfo.Hardcore then
								if v.hc == true then
									if SellPetInfo.Shiny then
										if v.sh == true then
											if SellPetInfo.DarkMatter then
												if v.dm then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											elseif SellPetInfo.Rainbow then
												if v.r then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											elseif SellPetInfo.Golden then
												if v.g then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											else
												if not v.dm and not v.r and not v.g then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											end
										end
									else
										if not (v.sh == true) then
											if SellPetInfo.DarkMatter then
												if v.dm then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											elseif SellPetInfo.Rainbow then
												if v.r then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											elseif SellPetInfo.Golden then
												if v.g then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											else
												if not v.dm and not v.r and not v.g then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											end
										end
									end
								end
							else
								if not v.hc then
									if SellPetInfo.Shiny then
										if v.sh == true then
											if SellPetInfo.DarkMatter then
												if v.dm then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											elseif SellPetInfo.Rainbow then
												if v.r then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											elseif SellPetInfo.Golden then
												if v.g then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											else
												if not v.dm and not v.r and not v.g then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											end
										end
									else
										if not (v.sh == true) then
											if SellPetInfo.DarkMatter then
												if v.dm then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											elseif SellPetInfo.Rainbow then
												if v.r then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											elseif SellPetInfo.Golden then
												if v.g then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											else
												if not v.dm and not v.r and not v.g then
													table.insert(NeedPets, {v.uid, BoothPetsPrice})
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
			Invoke("Add Trading Booth Pet", NeedPets)
		end

		for k,v in Invoke("Get All Booths") do
			if v.Owner == game.Players.LocalPlayer.UserId then
				MyBooth = k
			end
		end

		if not (MyBooth == nil) then
			while selling do
				MyPetsCount = 0
				for _ in Invoke("Get All Booths")[MyBooth].Listings do
					MyPetsCount+=1
				end
				if MyPetsCount < BoothPetsAmount and selling then
					AddPets()
				end
				wait(1)
			end
		else
			for i = 1,50 do
				Invoke("Claim Trading Booth", i)
				wait(1)
			end
			return StartSelling()
		end
	end

	Section:NewToggle("Auto Sell pets", "Click to start put your pets on your booth", function(state)
		if state then
			selling = true
			spawn(StartSelling)
		else
			selling = false
		end
	end)

	local Tab = Window:NewTab("Save/Load")
	local Section = Tab:NewSection("Save/Load")

	Section:NewButton("Save Settings", "Save all settings of this GUI", function()
		for k in getgenv().Settings do
			getgenv().Settings[k] = ChangingVariables[k]
		end
		SaveSettings()
	end)
	Section:NewToggle("Auto Load Settings", "Auto Load Settings of this GUI", function(state)
		if state then
			ChangingVariables.AutoLoad = true
		else
			ChangingVariables.AutoLoad = false
		end
	end)

	local function StartLoad()
		for k, v in getgenv().Settings do
			ChangingVariables[k] = v
		end
		local ars = ""
		for i, v in ChangingVariables.FarmAreas do
			ars = ars..v..", "
		end
		AreasLabel:UpdateLabel("Choosed areas: "..ars)
		local ars = ""
		for i, v in ChangingVariables.ExcludedCoins do
			ars = ars..v..", "
		end
		ExAreasLabel:UpdateLabel("Excluded coins: "..ars)
		if ChangingVariables.FarmZone == true then
			AreasLabel:UpdateLabel("Choosed Farming Zone Mode")
		end
		game:GetService("RunService"):Set3dRenderingEnabled(ChangingVariables.Render)
		spawn(AutoHatch)
		spawn(StartFuse)
		spawn(ClaimDM)
		spawn(StartDM)
		spawn(StartRainbow)
		spawn(StartGolden)
		spawn(AutoCollectOrbs)
		spawn(AutoCollectLootbags)
		spawn(AutoFarm)
		spawn(SetFps)
		spawn(StatsTracker)
		spawn(SendCurrencyHook)
		spawn(function()
			GetEggInfoByName(ChangingVariables.SelectedEgg)
		end)
	end

	Section:NewButton("Load Settings", "Load all settings of this GUI", function()
		LoadSettings()
		StartLoad()
	end)
	Section:NewButton("Reset Settings", "Reset all settings of this GUI", function()
		for k in getgenv().Settings do
			getgenv().Settings[k] = DefaultSettings[k]
		end
		SaveSettings()
	end)

	local Tab = Window:NewTab("Info")
	local Section = Tab:NewSection("Info")

	local InsaneLuckLabel = Section:NewLabel("x25 Insane Luck:")
	local SuperBreakerLabel = Section:NewLabel("x25 Super Breaker:")
	local TotalEggsOpenned = Section:NewLabel("Total Eggs Openned:")
	local InventoryFreeSpace = Section:NewLabel("Free Space in Inventory:")

	local LibSave = require(game:GetService("ReplicatedStorage").Library.Client.Save).Get()
	local function UpdateInfo()
		local serverBoosts = Library.ServerBoosts.GetActiveBoosts()
		local playerEggsOpened = Library.Save.Get()["EggsOpened"]
		local insaneLucky = serverBoosts and serverBoosts["Insane Luck"] and tostring(serverBoosts["Insane Luck"].totalTimeLeft).."s" or "Inactive"
		local SuperBreaker = serverBoosts and serverBoosts["Super Breaker"] and tostring(serverBoosts["Super Breaker"].totalTimeLeft).."s" or "Inactive"
		local MaxSlots = LibSave.MaxSlots
		local PetsCound = #LibSave.Pets
		InsaneLuckLabel:UpdateLabel("x25 Insane Luck: "..insaneLucky)
		SuperBreakerLabel:UpdateLabel("x25 Super Breaker: "..SuperBreaker)
		InventoryFreeSpace:UpdateLabel("Free Space in Inventory: "..MaxSlots-PetsCound)
		local totaleggs = 0
		for _,v in playerEggsOpened do
			totaleggs+=tonumber(v)
		end
		TotalEggsOpenned:UpdateLabel("Total Eggs Openned: ["..Library.Functions.Commas(totaleggs).."]")
	end

	spawn(function()
		while wait() do
			UpdateInfo()
		end
	end)

	local Tab = Window:NewTab("Webhook")
	local Section = Tab:NewSection("Webhook")

	Section:NewTextBox("Webhook URL", "Enter your Discord Webhook URL", function(txt)
		ChangingVariables.WebHookID = txt
	end)

	Section:NewButton("Test Webhook", "Click to test your webhook", function()
		local fields = {
			{
				["name"] = "Test",
				["value"] = "Test",
				["inline"] = true
			}
		}
		sendWebhook("Test", fields, Color3.fromRGB(0, 0, 0), true)
	end)
	
	Section:NewLabel("Webhooks before server hop (Autofarm function)")

	Section:NewToggle("Send earned diamonds", "Send diamonds before server hop (autofarm function)", function(state)
		ChangingVariables.DiamondsHook = state
	end)
	
	Section:NewToggle("Send earned other currency", "Other coins before server hop (autofarm function)", function(state)
		ChangingVariables.OtherCurrencyHook = state
	end)
	
	Section:NewLabel("Webhooks with delay")
	
	Section:NewSlider("Webhook Delay", "Webhook Delay (in seconds)", 1800, 30, function(s)
		ChangingVariables.HookCD = s
	end)
	
	Section:NewToggle("Send every Delay Time", "Send webhooks every Delay Time below", function(state)
		ChangingVariables.SendPerCDHook = state
		if not SendingCurrencyHook then
			SendCurrencyHook()
		end
	end)

	
	Section:NewLabel("Pets Webhook")
	
	Section:NewToggle("Send hatched pets", "Send hatched pets", function(state)
		ChangingVariables.PetsHatchedHook = state
	end)
	
	Section:NewLabel("Type of pets")
	
	Section:NewToggle("Normal", "Send notify about Normal pets", function(state)
		ChangingVariables.NormalPetsHatchedHook = state
	end)
	
	Section:NewToggle("Rare", "Send notify about Rare pets", function(state)
		ChangingVariables.RarePetsHatchedHook = state
	end)
	
	Section:NewToggle("Epic", "Send notify about Epic pets", function(state)
		ChangingVariables.EpicPetsHatchedHook = state
	end)
	
	Section:NewToggle("Legendary", "Send notify about Legendary pets", function(state)
		ChangingVariables.LegendaryPetsHatchedHook = state
	end)
	
	Section:NewToggle("Mythical", "Send notify about Mythical pets", function(state)
		ChangingVariables.MythicalPetsHatchedHook = state
	end)
	
	Section:NewToggle("Secret", "Send notify about Secret pets", function(state)
		ChangingVariables.SecretPetsHatchedHook = state
	end)
	
	Section:NewToggle("Exclusive", "Send notify about Exclusive pets", function(state)
		ChangingVariables.ExclusivePetsHatchedHook = state
	end)

	local Tab = Window:NewTab("GUI")
	local Section = Tab:NewSection("GUI")
	Section:NewKeybind("Hide GUI", "Hide GUI", Enum.KeyCode.F, function()
		GLibrary:ToggleUI()
	end)
	local themes = {
		SchemeColor = Color3.fromRGB(255, 255, 255),
		Background = Color3.fromRGB(255, 255, 0),
		Header = Color3.fromRGB(0, 170, 0),
		TextColor = Color3.fromRGB(0, 0, 0),
		ElementColor = Color3.fromRGB(255, 170, 0)
	}
	for theme, color in pairs(themes) do
		Section:NewColorPicker(theme, "Change your "..theme, color, function(color3)
			GLibrary:ChangeColor(theme, color3)
		end)
	end
	local vu = game:GetService("VirtualUser")
	game:GetService("Players").LocalPlayer.Idled:connect(function()
		vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
		wait(1)
		vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	end)

	LoadSettings()
	if getgenv().Settings.AutoLoad == true then
		StartLoad()
	end
end
